class Solution {
    public int trapRainWater(int[][] heightMap) {
       int n = heightMap.length;
       int m = heightMap[0].length;
       PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
       boolean visited[][] = new boolean[n][m];
       for(int i = 0 ; i < n ; i++){
           pq.offer(new int[]{heightMap[i][0] , i , 0});
           visited[i][0] = true;

           pq.offer(new int[]{heightMap[i][m - 1] , i , m - 1});
           visited[i][m - 1] = true;
       }
       for(int i = 0 ; i < m ; i++){
           pq.offer(new int[]{heightMap[0][i] , 0 , i});
           visited[0][i] = true;

           pq.offer(new int[]{heightMap[n - 1][i] , n -1 , i});
           visited[n - 1][i] = true;
       }
       int water = 0;
       int dir[][] = {{0 , -1} , {0 , 1} , {-1 , 0} , {1 , 0}};
       while(!pq.isEmpty()){
           int[] arr = pq.poll();
           int height = arr[0];
           int row = arr[1];
           int column = arr[2];

           for(int d[] : dir){
              int newRow = row + d[0];
              int newColumn = column + d[1];

              if(newRow >= 0 && newRow < n && newColumn >= 0 && newColumn < m && !visited[newRow][newColumn]){
                int num = height - heightMap[newRow][newColumn];
                if(num >= 0)
                   water += num;
                pq.offer(new int[]{Math.max(height , heightMap[newRow][newColumn]) , newRow , newColumn});
                visited[newRow][newColumn] = true;
              }

           }          
       }
       return water;
    }
}
